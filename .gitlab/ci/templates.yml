# Holds templates used for jobs

.premerge_check_template:
  stage: pre
  tags:
    - build
  script:
    - source ${IDF_PATH}/export.sh
    # check the exported fw versions
    - python tools/check_fw_versions.py
    # check the changelog
    - python tools/check_changelog.py

.build_template_coprocessor:
  stage: build_coprocessor
  tags:
    - build
  artifacts:
    when: always
    expire_in: 4 days
  script:
    - export IDF_PYTHON_CHECK_CONSTRAINTS=yes
    - ${IDF_PATH}/install.sh --enable-ci
    - source ${IDF_PATH}/export.sh
    - SDKCONFIG_PATTERN="sdkconfig.ci.${SLAVE_CI_FILE}"
    # Build with IDF pedantic flags and IDF build apps script
    - export PEDANTIC_FLAGS="-DIDF_CI_BUILD -Werror -Werror=deprecated-declarations -Werror=unused-variable -Werror=unused-but-set-variable -Werror=unused-function"
    - export EXTRA_CFLAGS="${PEDANTIC_FLAGS} -Wstrict-prototypes"
    - export EXTRA_CXXFLAGS="${PEDANTIC_FLAGS}"
    - cd slave
    # use --enable-preview-targets to build for all targets
    - idf-build-apps find -p . --enable-preview-targets --config ${SDKCONFIG_PATTERN} -vv --target ${IDF_TARGET}
    - idf-build-apps build -p . --enable-preview-targets --config ${SDKCONFIG_PATTERN} -vv --target ${IDF_TARGET}

.build_template_example:
  stage: build_example
  tags:
    - build
  artifacts:
    when: always
    expire_in: 4 days
  script:
    - export IDF_PYTHON_CHECK_CONSTRAINTS=yes
    - ${IDF_PATH}/install.sh --enable-ci
    - source ${IDF_PATH}/export.sh
    # Need to rename the cloned "esp_hosted_mcu" directory since the injected component name is "esp_hosted"
    - cd .. && rm -rf esp_hosted && mv esp_hosted_mcu esp_hosted && cd esp_hosted
    # Create components directory and link esp_hosted component
    - export OVERRIDE_PATH=`pwd`
    - cd examples/${EXAMPLE_TO_BUILD}
    # Create components directory and link esp_hosted component
    - mkdir -p components
    - ln -sf ${OVERRIDE_PATH} components/esp_hosted
    # Override component dependency as backup only if not already present
    - |
      if ! grep -q "esp_hosted" main/idf_component.yml 2>/dev/null; then
        cat ${OVERRIDE_PATH}/.gitlab-ci-override-idf-component.yml >> main/idf_component.yml
        echo "Added esp_hosted override to idf_component.yml"
      fi
    # Add slave target configuration if specified
    - |
      if [ ! -z "${IDF_SLAVE_TARGET}" ]; then
        echo "CONFIG_SLAVE_IDF_TARGET_${IDF_SLAVE_TARGET^^}=y" >> sdkconfig.defaults
        echo "Added slave target CONFIG_SLAVE_IDF_TARGET_${IDF_SLAVE_TARGET^^}=y to sdkconfig.defaults"
      fi
    # Build with IDF pedantic flags and IDF build apps script
    - export PEDANTIC_FLAGS="-DIDF_CI_BUILD -Werror -Werror=deprecated-declarations -Werror=unused-variable -Werror=unused-but-set-variable -Werror=unused-function"
    - export EXTRA_CFLAGS="${PEDANTIC_FLAGS} -Wstrict-prototypes"
    - export EXTRA_CXXFLAGS="${PEDANTIC_FLAGS}"
    # Build with extra ci config file if specified
    - |
      if [ ! -z "${EXAMPLE_CI_FILE}" ]; then
        idf-build-apps find -p . -vv --config sdkconfig.ci.${EXAMPLE_CI_FILE} --target ${IDF_TARGET}
        idf-build-apps build -p . -vv --config sdkconfig.ci.${EXAMPLE_CI_FILE} --target ${IDF_TARGET}
      else
        idf-build-apps find -p . -vv --target ${IDF_TARGET}
        idf-build-apps build -p . -vv --target ${IDF_TARGET}
      fi

.build_template:
  stage: build
  tags:
    - build
  artifacts:
    paths:
      - "artifacts_*/"
    when: always
    expire_in: 4 days
  script:
    - export IDF_PYTHON_CHECK_CONSTRAINTS=yes
    - ${IDF_PATH}/install.sh --enable-ci
    - source ${IDF_PATH}/export.sh
    # Need to rename the cloned "esp_hosted_mcu" directory since the injected component name is "esp_hosted"
    - cd .. && rm -rf esp_hosted && mv esp_hosted_mcu esp_hosted && cd esp_hosted
    # Replaces esp_hosted component in example's deps with the one from the current repository
    - export OVERRIDE_PATH=`pwd`
    - cd ${IDF_PATH}/${IDF_EXAMPLE_PATH}
    # Create components directory and link esp_hosted component
    - mkdir -p components
    - ln -sf ${OVERRIDE_PATH} components/esp_hosted
    - echo "Created components directory with esp_hosted link:"
    - ls -la components/
    # Override component dependency as backup only if not already present
    - |
      if ! grep -q "esp_hosted" main/idf_component.yml 2>/dev/null; then
        cat ${OVERRIDE_PATH}/.gitlab-ci-override-idf-component.yml >> main/idf_component.yml
        echo "Added esp_hosted override to idf_component.yml"
      fi
    # Add slave target configuration if specified
    - |
      if [ ! -z "${IDF_SLAVE_TARGET}" ]; then
        echo "CONFIG_SLAVE_IDF_TARGET_${IDF_SLAVE_TARGET^^}=y" >> sdkconfig.defaults
        echo "Added slave target CONFIG_SLAVE_IDF_TARGET_${IDF_SLAVE_TARGET^^}=y to sdkconfig.defaults"
      fi
    # HOSTED_CI_FILE: use custom sdkconfig CI file from esp_hosted directory, or
    # EXAMPLE_CI_FILE: use sdkconfig CI file in example directory
    - |
      if [ ! -z "${SDKCONFIG_CI_FILE}" ]; then
        cp ${OVERRIDE_PATH}/${SDKCONFIG_CI_FILE} ./sdkconfig.ci.custom
        echo "Using custom sdkconfig: ${SDKCONFIG_CI_FILE}"
        SDKCONFIG_PATTERN="sdkconfig.ci.custom"
      elif [ ! -z "${EXAMPLE_CI_FILE}" ]; then
        echo "Using CI sdkconfig file in example: ${EXAMPLE_CI_FILE}"
        SDKCONFIG_PATTERN="./${EXAMPLE_CI_FILE}"
      else
        SDKCONFIG_PATTERN="sdkconfig.ci*"
      fi
    - echo "SDKCONFIG_PATTERN is ${SDKCONFIG_PATTERN}"
    # Build with IDF pedantic flags and IDF build apps script
    - export PEDANTIC_FLAGS="-DIDF_CI_BUILD -Werror -Werror=deprecated-declarations -Werror=unused-variable -Werror=unused-but-set-variable -Werror=unused-function"
    - export EXTRA_CFLAGS="${PEDANTIC_FLAGS} -Wstrict-prototypes"
    - export EXTRA_CXXFLAGS="${PEDANTIC_FLAGS}"
    # Remove the conflicting extconn config that disables hosted
    - rm -f sdkconfig.ci.*extconn*
    # use --config-file to override default IDF config file
    # use --enable-preview-targets to build for all targets
    # use --override-sdkconfig-items to override (possibly incorrect) build target that may be in provided config file
    - idf-build-apps find -p . --enable-preview-targets --config-file "${OVERRIDE_PATH}/.idf_build_apps.toml" --config ${SDKCONFIG_PATTERN} --override-sdkconfig-items=CONFIG_IDF_TARGET=${IDF_TARGET} -vv --target ${IDF_TARGET}
    - idf-build-apps build -p . --enable-preview-targets --config-file "${OVERRIDE_PATH}/.idf_build_apps.toml" --config ${SDKCONFIG_PATTERN} --override-sdkconfig-items=CONFIG_IDF_TARGET=${IDF_TARGET} -vv --target ${IDF_TARGET}
#    - echo "----------- last sdkconfig.defaults,ci* used (${IDF_TARGET}-${IDF_SLAVE_TARGET}) --------------"
#    - cat sdkconfig.defaults
#    - cat sdkconfig.ci*
#    - echo "----------- last (generated) sdkconfig used (${IDF_TARGET}-${IDF_SLAVE_TARGET}) --------------"
#    - cat sdkconfig
#    - echo "----------------------------------------------"
    # Copy config files back to project directory for artifacts
    - mkdir -p ${OVERRIDE_PATH}/artifacts_${IDF_TARGET}_${IDF_SLAVE_TARGET}
    - cp sdkconfig* ${OVERRIDE_PATH}/artifacts_${IDF_TARGET}_${IDF_SLAVE_TARGET}/ 2>/dev/null || echo "No sdkconfig files found"
    - cp main/idf_component.yml ${OVERRIDE_PATH}/artifacts_${IDF_TARGET}_${IDF_SLAVE_TARGET}/ 2>/dev/null || echo "No component file found"
    # Clean up the component symlink
    - unlink components/esp_hosted
    - echo "Cleaned up esp_hosted component symlink"
    # Rename back, since post scripts expect the original name
    - cd ${OVERRIDE_PATH} && cd .. && mv esp_hosted esp_hosted_mcu
